// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  trades   Trade[]
  wishlist Wishlist[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Trendline {
  id         Int      @id @default(autoincrement())
  token      Int
  tf         String
  slope      Float
  intercept Float
  startdate  DateTime
  enddate    DateTime
  hl         String
  index1     Int
  index2     Int
  index      Int
  connects   Int
  totalconnects Int
  trades     Trade[]

  @@map(name: "trendlines")
}

model Trade {
  id              Int      @id @default(autoincrement())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  trendlineId     Int
  trendline       Trendline @relation(fields: [trendlineId], references: [id])
  token           Int
  tf              String
  status          String
  direction       String
  entry_condition String
  entry           DateTime  @default(now())
  exit            DateTime?
  tp              Float
  sl              Float
  bp              Float
  sp              Float
  rrr             Float
  quantity        Float
  cap             Float
  current_value   Float
  pl              Float

  @@map(name: "trades")
}

model Wishlist {
  id       Int      @id @default(autoincrement())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  token    Int
  category String
  
  @@unique([userId, token], name: "userId_token")
  @@map(name: "wishlist")
}


